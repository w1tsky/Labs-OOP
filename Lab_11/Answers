1.LINQ (Language-Integrated Query) представляет простой и удобный язык запросов к источнику данных. В качестве источника данных может
выступать объект, реализующий интерфейс IEnumerable (например, стандартные коллекции, массивы), набор данных DataSet, документ XML.
Но вне зависимости от типа источника LINQ позволяет применить ко всем один и тот же подход для выборки данных.

2.При отложенном выполнении LINQ-выражение не выполняется, пока не будет произведена итерация или перебор по выборке. Рассмотрим отложенное
выполнение:
С помощью ряда методов мы можем применить немедленное выполнение запроса. Это методы, которые возвращают одно атомарное значение или один элемент. Например, Count(), Average(), First() / FirstOrDefault(), Min(), Max() и т.д. Например, метод Count() возвращает числовое значение, которое представляет количество элементов в полученной последовательности. А метод First() возвращает первый элемент последовательности. Но чтобы выполнить эти методы, вначале надо получить саму последовательность, то есть результат запроса, и пройтись по ней циклом foreach, который вызывается неявно внутри структуры запроса.

Лямбда-выражения представляют упрощенную запись анонимных методов. Лямбда-выражения позволяют создать емкие лаконичные методы, которые могут возвращать некоторое значение и которые можно передать в качестве параметров в другие методы.
Ламбда-выражения имеют следующий синтаксис: слева от лямбда-оператора => определяется список параметров, а справа блок выражений, использующий эти параметры: (список_параметров) => выражение. Например:

from, where>, orderby, select

Операция Where используется для фильтрации элементов в последовательность.

Операция Select используется для создания выходной последовательности одного типа элементов из входной последовательности элементов другого типа. Эти типы не обязательно должны совпадать.

Метод Skip() пропускает определенное количество элементов, а метод Take() извлекает определенное число элементов. Нередко данные методы применяются вместе для создания постраничного вывода.

Операция Concat используется для сцепления

Операция OrderBy позволяет упорядочить входную последовательность на основе метода keySelector, который возвращает значение ключа для каждого входного элемента. Упорядоченная выходная последовательность IOrderedEnumerable выдается в порядке возрастания на основе значений возвращенных ключей.

Операция join используется для объединения

Операция Distinct удаляет дублированные элементы из входной последовательности. Операция Union возвращает объединение множеств из двух исходных последовательностей. Операция Intersect возвращает пересечение множеств из двух исходных последовательностей. Операция Except возвращает последовательность, содержащую все элементы первой последовательности, которых нет во второй последовательности.

Операция First возвращает первый элемент последовательности или первый элемент последовательности, соответствующий предикату — в зависимости от использованного прототипа. Операция All возвращает true, если каждый элемент входной последовательности отвечает условию. Операция Last возвращает последний элемент последовательности или последний элемент, соответствующий предикату — в зависимости от используемого прототипа. Операция Any возвращает true, если любой из элементов входной последовательности отвечает условию. Операция Contains возвращает true, если любой элемент входной последовательности соответствует указанному значению.

Операция Average возвращает среднее арифметическое числовых значений элементов входной последовательности. Операция sum - сумму Операция min - минимальный элемени Операция max - максимальный элемент

10
