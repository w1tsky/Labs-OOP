1.Что такое делегат?Как определить делегат?
  Делегат- это  объект, предназначенный для хранения ссылок на методы.
  Определение делегата:
  Для объявления делегата используется ключевое слово delegate, после которого идет возвращаемый тип, название и параметры. 
  Примеры:
    delegate void Message();
    delegate int Operation(int x, int y);
2.Назначение делегатов:
  1)Возможности определять вызываемый метод не при компиляции, а динамически во время выполнения программы.
  2)Обеспечения связи между объектами по типу"источник-наблюдатель".
  3)Создания универсальных методов, в которые можно передавать другие методы.
  4)Поддержки механизма обратного вызова.
3.Какие есть способы присвоения делегату адреса метода?
  способы присвоения делегату адреса метода:
  1)напрямую с помощью оператора "="
      Operation del = Add;
  2)создание объекта делегата с помощью конструктора, в который передается нужный метод
      Operation del2 = new Operation(Add);
4.Поясните назначение метода Invoke.
  Метод Invoke служит для вызова делегата.
  Message mes = Hello;
        mes.Invoke();
  Invoke() принимает делегат и выполняет его в том потоке, в котором был создан элемент управления, у которого вызывается Invoke. 
  BeginInvoke() и EndInvoke() то же самое, но асинхронно.
5.Что такое групповая адресация делегата?
 Групповая адрксация делегата - это создание списка, или цепочки вызовов, для методов. которые вызываются автоматически при обращении
 к делегату.
6.Как создать событие?
  Простейший способ создания события заключается в помещении ключевого слова event перед членом делегата 
  public event MethodContainer onCount;
7.Как события связаны с делегатами? Опишите и поясните схему их взаимодействия.
  Например, отслеживают изменение полей объекта типа. Для правильной работы данного механизма необходимо подписать объект на данные события, 
  указав реакцию на них. Затем в коде при происшествии какого-либо события нужно передавать в данное 
  событие определённый нами параметр, с которым будет выполняться реакция на данное событие. Так же можно отписать объект от данных событий.
8.Что такое лямбда-выражения? Приведите пример лямбда-выражения с несколькими параметрами.
  Лямбда-выражения представляют упрощенную запись анонимных методов. Лямбда-выражения позволяют создать емкие лаконичные методы, которые
  могут возвращать некоторое значение и которые можно передать в качестве параметров в другие методы. Ламбда-выражения имеют следующий 
  синтаксис: слева от лямбда-оператора => определяется список параметров, а справа блок выражений, использующий эти параметры:  
  delegate int Operation(int x, int y); Operation operation = (x, y) => x + y;
9.Что такое ковариантность и контравариантность делегатов? Что это дает?
  Ковариантность делегата предполагает, что возвращаемым типом может быть более производный тип. Контрвариантность делегата предполагает,
  что типом параметра может быть более универсальный тип.
  Делегаты становятся еще более гибкими средствами программирования благодаря двум свойствам: ковариантности и контравариантности. Как
  правило, метод, передаваемый делегату, должен иметь такой же возвращаемый тип и сигнатуру, как и делегат. Но в отношении производных
  типов это правило оказывается не таким строгим благодаря ковариантности и контравариантности. В частности, ковариантность позволяет 
  присвоить делегату метод, возвращаемым типом которого служит класс, производный от класса, указываемого в возвращаемом типе делегата.
  А контравариантность позволяет присвоить делегату метод, типом параметра которого служит класс, являющийся базовым для класса, 
  указываемого в объявлении делегата.
  10.Поясните разницу между встроенными делегатами Action и Func.
  Action имеет тип возвращаемого значения void. Func имеет такой тип возвращаемого значения, который мы определим как последний тип 
  данных Func<in T1, in T2,...in T16, out TResult>()
  Делегат Func предназначен для инкапсуляции метода, который принимает в качестве параметров от нуля дл четырех аргументов и возвращает
  значение. Что же касается делегата Action, то единственное отличие его от Func – это то, что Action возвращает процедуру.
